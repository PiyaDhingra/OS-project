#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<pthread.h>
pthread_mutex_t lock;
int processes,resources;
int process[10];
int allocation[10][10];
int max[10][10];
int available[10];
int need[10][10];
void Need()
{
	int i,j;
    for ( i = 0 ; i < processes ; i++)
    {
        for (j = 0 ; j < resources ; j++)
        {
	  need[i][j] = max[i][j]-allocation[i][j];
      }
    }
printf("need of processes\n");
for (i = 0 ; i < processes ; i++)
       
	 {
	 for ( j = 0 ; j < resources ; j++)
	 {
	 
            printf("%d ",need[i][j]);
       }
        printf("\n");
       }
}

bool isSafe()
{
    
     int i,j,k,p;
    
    Need();
   
    printf("**********now check the safe state***********");
    printf("\n");
printf("values of allocation is\n");
for( i=0;i<processes;i++)
    {
   for(j=0;j<resources;j++)
      {
        printf("%d ",allocation[i][j]);
      }
      printf("\n");
     }
printf("value of max is\n");
for(i=0;i<processes;i++)
    {
   for( j=0;j<resources;j++)
      {
        printf("%d ",max[i][j]);
      }
      printf("\n");
     }
printf("available amount is\n");
for(i=0;i<resources;i++)
{
printf("%d\t%d\n",i,available[i]);
}


  
bool finish[processes];
   for( i=0;i<processes;i++)
      {
        finish[i]=false;
      } 

   
int safeSeq[processes];
int work[resources];
for ( i = 0; i < resources ; i++)
        work[i] = available[i];
int count = 0;
while (count < processes)
    {
       
        bool found = false;
        for (p = 0; p < processes; p++)
        {
            
            if (finish[p] == false)
            {
               
                int j;
                for (j = 0; j < resources; j++)
                    if ((need[p][j] > work[j])||(need[p][j]<0))
                        break;

                
                if (j == resources)
                {
                 
                    for ( k = 0 ; k < resources ; k++)
                        work[k] =work[k]+allocation[p][k];

                   
                    safeSeq[count++] = p;

                  
                    finish[p] = true;

                    found = true;
                }
            }
        }

   
        if (found == false)
        {
            printf("System is not in safe state");
            printf("\n");
            return false;
        }
    }
    printf("System is in safe state.\nSafe"
         " sequence is: ");
         printf("\n");
    for ( i = 0; i < processes; i++)
        printf("%d ",safeSeq[i]);

 return true;

}
void update(int request[resources],int pro)
{
	int j;
	for(j=0;j<resources;j++)
	{
		if(request[j]<=need[pro][j])
		{
			goto two;
		}
		else
		{
			printf("request is more than need");
			printf("\n");
		}
	    two: if(request[j]<=available[j])
		{
			 goto three;
		}
		else
		{
			printf("request is more than available");
			printf("\n");
		}
	    three: 
	         available[j]=available[j]-request[j];
	         allocation[pro][j]=allocation[pro][j]+request[j];
	       
	}
}

void request_for_resources(int i)
{
	pthread_mutex_lock(&lock);
	int j;
	int pro = i;
    int request[resources];
    printf("Enter request array for process %d\n\n",pro);
    for(j=0;j<resources;j++)
	{
	    printf("Enter the number of instances required of resource %d\n",j);
	    scanf("%d",&request[j]);
	}
	update(request,pro);
    if (isSafe() == false)
	{
	   printf("Request can not be granted\n");
	   for(j=0;j<resources;j++)
	   {
	   available[j]=available[j]+request[j];
	   allocation[pro][j]=allocation[pro][j]-request[j];
         }
	}
	else
	{
	printf("Request granted.....resources are allocated :\n");
	}

	pthread_mutex_unlock(&lock);
	pthread_exit(NULL);
}

int main()
{
int i,j;
pthread_mutex_init(&lock,NULL);
printf("Enter the number of processes\n");
scanf("%d",&processes);
printf("Enter the number of resources\n");
scanf("%d",&resources);

for(i=0;i<processes;i++)
{
process[i]=i;
}
printf("Enter value for allocation\n");
for(i=0;i<processes;i++)
    {
   for(j=0;j<resources;j++)
      {
        scanf("%d",&allocation[i][j]);
      }
     }
printf("values of allocation is\n");
for(i=0;i<processes;i++)
    {
   for(j=0;j<resources;j++)
      {
        printf("%d ",allocation[i][j]);
      }
      printf("\n");
     }
printf("Enter the value of max\n");
for(i=0;i<processes;i++)
    {
   for(j=0;j<resources;j++)
      {
        scanf("%d",&max[i][j]);
      }
     }
printf("value of max is");
for(i=0;i<processes;i++)
    {
   for(j=0;j<resources;j++)
      {
        printf("%d ",max[i][j]);
      }
      printf("\n");
     }
printf("Enter the available amount");
int available1[resources];
for(i=0;i<resources;i++)
{
scanf("%d",&available[i]);
}
printf("available amount is\n");

for(i=0;i<resources;i++)
{
printf("%d \n",available[i]);

}


isSafe();
 pthread_t th[processes];
	for(i=0;i<processes;i++)
	{
	    pthread_create(&th[i],NULL,request_for_resources,i);
	}

	for(i=0;i<processes;i++)
	{
	    pthread_join(th[i],NULL);
	}

    return 0;
}

